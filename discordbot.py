"""Discord Bot [Salapakjai] by P-ZAP"""
import logging
import os
from typing import Optional
import random
import asyncio
import datetime
import nextcord
from dotenv import load_dotenv
from nextcord.ext import commands

from utils import (
    generate_puzzle_embed,
    process_message_as_guess,
    random_puzzle_id,
    daily_puzzle_id
)

intents = nextcord.Intents.default()
intents.members = True
intents.message_content = True
logging.basicConfig(level=logging.INFO)

load_dotenv()

activity = nextcord.Activity(type=nextcord.ActivityType.listening, name="/play")

bot = commands.Bot(command_prefix=commands.when_mentioned_or("w?"), activity=activity, intents=intents)
bot = commands.Bot(command_prefix="/", intents=intents)


GUILD_IDS = (
    [int(guild_id) for guild_id in os.getenv("GUILD_IDS", "").split(",")]
    if os.getenv("GUILD_IDS", None)
    else nextcord.utils.MISSING
)


# ========================================== ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ ==========================================

@bot.event
async def on_ready():
    """‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô Terminal VSCode ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"""
    length1 = (len("Your bot is now online and ready to use"))
    length2 = (len("( Logged in as -> \"" + str(bot.user) + "\" )"))
    longest = max(length1, length2)

    print("-" * (longest+4))
    print("| " + "Your bot is now online and ready to use" + (" " * (longest - length1)) + " |")
    print("| " + f"( Logged in as -> \"{bot.user}\" )" + (" " * (longest - length2)) + " |")
    print("-" * (longest+4))

@bot.event
async def on_member_join(member):
    """‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ã‡∏¥‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå"""
    guild = member.guild
    channel_name = "welcome"  #‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏° Text channel ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
    channel = nextcord.utils.get(guild.text_channels, name=channel_name)
    if channel and channel.permissions_for(guild.me).send_messages:
        embed = nextcord.Embed(title=f" Welcome {member} üéâ!", description=f"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö {member.mention} \n ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà {guild.name} \n ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏Å‡∏±‡∏ö‡∏î‡∏¥‡∏™‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏´‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏ô‡∏∞!", color=0x00d9ff)
        embed.set_thumbnail(member.display_avatar)
        await channel.send(embed=embed)


@bot.event
async def on_member_remove(member):
    """‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå"""
    guild = member.guild
    channel_name = "welcome"  #‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏° Text channel ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
    channel = nextcord.utils.get(guild.text_channels, name=channel_name)

    if channel and channel.permissions_for(guild.me).send_messages:
        embed = nextcord.Embed(title=f" Goodbye {member} üëã!", description=f"‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô  {member.mention} \n ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏ß‡πâ‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏∞!", color=0xff0000)
        embed.set_thumbnail(member.display_avatar)
        await channel.send(embed=embed)

@bot.event
async def on_voice_state_update(member, before, after):
    """‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢"""
    guild = member.guild
    channel_name = "vc-log"  #‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏° Text channel ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
    channel = nextcord.utils.get(guild.text_channels, name=channel_name)
    voicechannel = bot.get_channel(1173175465113038918) #‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏•‡∏Ç‡∏ï‡∏≤‡∏° Voice Channel ID
    time1 = datetime.datetime.now()
    timenow = time1.strftime("%H:%M:%S  -  %d %B %Y")
    if before.channel != after.channel: #‡πÄ‡∏Ç‡πâ‡∏≤
        if after.channel is not None and after.channel.id == 1173175465113038918: #‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏•‡∏Ç‡∏ï‡∏≤‡∏° Voice Channel ID
            embed = nextcord.Embed(title=f"{member.name} ‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏™‡∏π‡πà {voicechannel.name}", description=f"‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ {timenow} \n ‡∏à‡∏∞‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡∏≤‡πÑ‡∏´‡∏°‡∏ô‡∏∞?")
            await channel.send(embed=embed)
    if before.channel != after.channel: #‡∏≠‡∏≠‡∏Å
        if before.channel is not None and before.channel.id == 1173175465113038918: #‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏•‡∏Ç‡∏ï‡∏≤‡∏° Voice Channel ID
            embed = nextcord.Embed(title=f"{member.name} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å {voicechannel.name}", description=f"‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ {timenow} \n Bon Voyage ‡πÑ‡∏ß‡πâ‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô")
            await channel.send(embed=embed)


# ========================================== ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡∏° Wordle ==========================================

@bot.slash_command(name="play", description="‡πÄ‡∏•‡πà‡∏ô Wordle", guild_ids=GUILD_IDS)
async def slash_play(interaction: nextcord.Interaction):
    """‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°"""
    pass


@slash_play.subcommand(name="random", description="‡πÄ‡∏•‡πà‡∏ô Wordle ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°")
async def slash_play_random(interaction: nextcord.Interaction):
    """/play random"""
    embed = generate_puzzle_embed(interaction.user, random_puzzle_id())
    await interaction.send(embed=embed)

@slash_play.subcommand(name="daily", description="‡πÄ‡∏•‡πà‡∏ô Wordle ‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
async def slash_play_daily(interaction: nextcord.Interaction):
    """/play daily"""
    embed = generate_puzzle_embed(interaction.user, daily_puzzle_id())
    await interaction.send(embed=embed)

@slash_play.subcommand(name="id", description="‡πÄ‡∏•‡πà‡∏ô Wordle ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà ID")
async def slash_play_id(
    interaction: nextcord.Interaction,
    puzzle_id: int = nextcord.SlashOption(description="‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≤‡∏¢"),
):
    """/play id"""
    embed = generate_puzzle_embed(interaction.user, puzzle_id)
    await interaction.send(embed=embed)

@bot.group(invoke_without_command=True)
async def play(ctx: commands.Context, puzzle_id: Optional[int] = None):
    """‡πÄ‡∏•‡πà‡∏ô Wordle game"""
    embed = generate_puzzle_embed(ctx.author, puzzle_id or random_puzzle_id())
    await ctx.reply(embed=embed, mention_author=False)


@play.command(name="random")
async def play_random(ctx: commands.Context):
    """‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏ö‡∏ö Random"""
    embed = generate_puzzle_embed(ctx.author, random_puzzle_id())
    await ctx.reply(embed=embed, mention_author=False)


@play.command(name="daily")
async def play_daily(ctx: commands.Context):
    """‡πÄ‡∏•‡πà‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô"""
    embed = generate_puzzle_embed(ctx.author, daily_puzzle_id())
    await ctx.reply(embed=embed, mention_author=False)

@play.command(name="id")
async def play_id(ctx: commands.Context, puzzle_id: int):
    """‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏≤‡∏Å ID"""
    embed = generate_puzzle_embed(ctx.author, puzzle_id)
    await ctx.reply(embed=embed, mention_author=False)

@bot.event
async def on_message(message: nextcord.Message):
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤"""
    processed_as_guess = await process_message_as_guess(bot, message)
    if not processed_as_guess:
        await bot.process_commands(message)


# ========================================== ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡∏° BLACKJACK ==========================================

@bot.command(name='bj', help='‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏ö‡∏•‡πá‡∏Å‡πÅ‡∏à‡πá‡∏Ñ‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó')
async def play_blackjack(ctx):
    """‡πÄ‡∏Å‡∏° Blackjack"""
    deck = create_deck()
    player_hand = [draw_card(deck), draw_card(deck)]
    bot_hand = [draw_card(deck), draw_card(deck)]

    player_card = [card["rank"] for card in player_hand]
    bot_card = bot_hand[0]['rank']

    embed = nextcord.Embed(title=f"‡πÑ‡∏û‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: {player_card}")
    await ctx.send(embed=embed)
    embed = nextcord.Embed(title=f"‡πÑ‡∏û‡πà‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó: {bot_card}", description=f"‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏≠‡∏ö‡πÑ‡∏ß‡πâ‡∏≠‡∏µ‡∏Å 1 ‡πÉ‡∏ö.")
    await ctx.send(embed=embed)

    while sum(get_card_value(card) for card in player_hand) < 21:
        hit_or_stand = await prompt_for_hit_or_stand(ctx)
        if hit_or_stand.lower() == 'hit':
            player_hand.append(draw_card(deck))
            player_card = [card["rank"] for card in player_hand]
            embed = nextcord.Embed(title=f"‡πÑ‡∏û‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: {player_card}")
            await ctx.send(embed=embed)
        else:
            break

    while sum(get_card_value(card) for card in bot_hand) < 17:
        bot_hand.append(draw_card(deck))

    bot_cards = [card["rank"] for card in bot_hand]
    embed = nextcord.Embed(title=f"‡πÑ‡∏û‡πà‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó: {bot_cards}")
    await ctx.send(embed=embed)

    result = determine_winner_bj(player_hand, bot_hand)
    embed = nextcord.Embed(title=f"{result}")
    await ctx.send(embed=embed)



def create_deck():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏î‡πá‡∏Ñ‡πÑ‡∏û‡πà"""
    ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
    suits = ['Hearts', 'Diamonds', 'Clubs', 'Spades']
    deck = [{'rank': rank, 'suit': suit} for rank in ranks for suit in suits]
    random.shuffle(deck)
    return deck

def draw_card(deck):
    """‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏û‡πà"""
    return deck.pop()

async def prompt_for_hit_or_stand(ctx):
    """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Action"""
    embed = nextcord.Embed(title="‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞ hit ‡∏´‡∏£‡∏∑‡∏≠ stand?", description="‡∏û‡∏¥‡∏°‡∏û‡πå `hit` ‡∏´‡∏£‡∏∑‡∏≠ `stand`.")
    await ctx.send(embed=embed)
    try:
        response = await bot.wait_for('message', timeout=30, check=lambda m: m.author == ctx.author and m.content.lower() in ['hit', 'stand'])
        return response.content.lower()
    except asyncio.TimeoutError:
        embed = nextcord.Embed(title="‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤", description="‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å stand")
        await ctx.send(embed=embed)
        return 'stand'

def get_card_value(card):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡πÑ‡∏û‡πà"""
    if card["rank"].isdigit():
        return int(card["rank"])
    elif card["rank"] in ['J', 'Q', 'K']:
        return 10
    elif card["rank"] == 'A':
        return 11

def determine_winner_bj(player_hand, bot_hand):
    """‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞"""
    player_sum = sum(get_card_value(card) for card in player_hand)
    bot_sum = sum(get_card_value(card) for card in bot_hand)

    if player_sum > 21:
        return '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ï‡πâ‡∏°‡πÄ‡∏Å‡∏¥‡∏ô! ‡∏ö‡∏≠‡∏ó‡∏ä‡∏ô‡∏∞ üíî'
    elif bot_sum > 21:
        return '‡∏ö‡∏≠‡∏ó‡πÅ‡∏ï‡πâ‡∏°‡πÄ‡∏Å‡∏¥‡∏ô! ‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞! üéâ'
    elif player_sum > bot_sum:
        return '‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞! üéâ'
    elif player_sum < bot_sum:
        return '‡∏ö‡∏≠‡∏ó‡∏ä‡∏ô‡∏∞ üíî'
    else:
        return '‡πÄ‡∏™‡∏°‡∏≠!ü§Ø'


# ========================================== ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡∏°‡∏ó‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ==========================================

@bot.command(name='gnum', help='‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏ó‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç')
async def start_guessing_game(ctx):
    """‡πÄ‡∏Å‡∏°‡∏ó‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç"""
    embed = nextcord.Embed(title=f"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÄ‡∏Å‡∏°‡∏™‡πå‡πÄ‡∏î‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç!", description=f"‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏û‡∏µ‡∏¢‡∏á 1 ‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 1 ‡∏ñ‡∏∂‡∏á 100. \n ‡∏•‡∏≠‡∏á‡πÄ‡∏î‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ô‡∏±‡πâ‡∏ô‡∏î‡∏π‡∏™‡∏¥! ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏≤‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà 7 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞")
    await ctx.send(embed=embed)

    # ‡∏™‡∏∏‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç 1 ‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏Ç 1 ‡∏ñ‡∏∂‡∏á 100
    secret_number = random.randint(1, 100)

    # ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ 7 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    guesschance = 7
    low, high = 1, 100
    for _ in range(7):
        guess = await prompt_for_guess(ctx, low, high, guesschance)
        if guess == secret_number:
            embed = nextcord.Embed(title="‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡πÄ‡∏î‡∏≤‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", description=f"‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠ : {secret_number}", color=0x04ff00)
            await ctx.send(embed=embed)
            break
        elif guess < secret_number:
            low = guess + 1
            await ctx.send("‡∏ï‡πà‡∏≥‡πÑ‡∏õ‡∏ô‡∏∞! ‡∏•‡∏≠‡∏á‡πÄ‡∏î‡∏≤‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ")
        else:
            high = guess - 1
            await ctx.send("‡∏™‡∏π‡∏á‡πÑ‡∏õ‡∏ô‡∏∞! ‡∏•‡∏≠‡∏á‡πÄ‡∏î‡∏≤‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ")
        guesschance -= 1
    else:
        await ctx.send(f"‡πÇ‡∏ä‡∏Ñ‡πÑ‡∏°‡πà‡∏î‡∏µ‡πÄ‡∏•‡∏¢ ‡∏´‡∏°‡∏î‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÅ‡∏•‡πâ‡∏ß. ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏≠ {secret_number}.")
        embed = nextcord.Embed(title="‡πÇ‡∏ä‡∏Ñ‡πÑ‡∏°‡πà‡∏î‡∏µ‡πÄ‡∏•‡∏¢ ‡∏´‡∏°‡∏î‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÅ‡∏•‡πâ‡∏ß", description=f"‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏≠ {secret_number}", color=0xff0000)
        await ctx.send(embed=embed)

async def prompt_for_guess(ctx, low, high, guesschance):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà‡∏°‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠"""
    embed = nextcord.Embed(title=f"‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á {low} ‡∏ñ‡∏∂‡∏á {high}:", description=f"‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏î‡∏≤‡∏≠‡∏µ‡∏Å {guesschance} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á!")
    await ctx.send(embed=embed)

    try:
        guess = await bot.wait_for('message', timeout=30, check=lambda m: m.author == ctx.author)
        guess_number = int(guess.content)
        if low <= guess_number <= high:
            return guess_number
        else:
            await ctx.send("‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏•‡∏≠‡∏á‡πÄ‡∏î‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á!")
            return await prompt_for_guess(ctx, low, high, guesschance)
    except (nextcord.ext.commands.errors.CommandNotFound, ValueError):
        await ctx.send('‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏™‡πà‡∏°‡∏±‡πà‡∏ß‡∏™‡∏¥! ‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏•‡∏á‡πÑ‡∏õ‡∏™‡∏¥')
        return await prompt_for_guess(ctx, low, high, guesschance)

# ========================================== ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡∏°‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡∏á‡∏â‡∏∏‡∏ö ==========================================
total_streak = 0

@bot.command(name='rps', help="‡πÄ‡∏Å‡∏°‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡πâ‡∏á‡∏â‡∏∏‡∏ö")
async def rock_paper_scissors(ctx, user_choice):
    """‡πÄ‡∏Å‡∏°‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡∏á‡∏â‡∏∏‡∏ö"""
    global total_streak

    user_choice = user_choice.lower()
    if user_choice not in ['‡∏Ñ‡πâ‡∏≠‡∏ô', '‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©', '‡∏Å‡∏£‡∏£‡πÑ‡∏Å‡∏£']:
        await ctx.send('‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô‡∏î‡∏µ‡πÜ‡∏´‡∏ô‡πà‡∏≠‡∏¢. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡∏≠‡∏∞‡πÑ‡∏£ ‡∏Ñ‡πâ‡∏≠‡∏ô, ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©, or ‡∏Å‡∏£‡∏£‡πÑ‡∏Å‡∏£.')
        return
    bot_choice = random.choice(['‡∏Ñ‡πâ‡∏≠‡∏ô', '‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©', '‡∏Å‡∏£‡∏£‡πÑ‡∏Å‡∏£'])
    result, colorrps = determine_winner_rps(user_choice, bot_choice)

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    if result == '‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞!':
        total_streak += 1
    else:
        total_streak = 0  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏û‡πâ

    embed = nextcord.Embed(title=f"‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å {user_choice}, ‡∏â‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å {bot_choice}", description=f"{result}", color=colorrps)
    embed.add_field(name="‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", value=total_streak)
    await ctx.send(embed=embed)

def determine_winner_rps(player, bot):
    """‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡∏á‡∏â‡∏∏‡∏ö"""
    if player == bot:
        return '‡∏î‡∏±‡∏ô‡πÄ‡∏™‡∏°‡∏≠!', 0x787878
    elif (player == '‡∏Ñ‡πâ‡∏≠‡∏ô' and bot == '‡∏Å‡∏£‡∏£‡πÑ‡∏Å‡∏£') or \
         (player == '‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©' and bot == '‡∏Ñ‡πâ‡∏≠‡∏ô') or \
         (player == '‡∏Å‡∏£‡∏£‡πÑ‡∏Å‡∏£' and bot == '‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©'):
        return '‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞!', 0x04ff00
    else:
        return '‡∏â‡∏±‡∏ô‡∏ä‡∏ô‡∏∞!', 0xff0000

bot.run(os.getenv("TOKEN"))
